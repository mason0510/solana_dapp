extern crate core;

use anchor_client::Client;

// The `accounts` and `instructions` modules are generated by the framework.
//use events::instruction as events_instruction;
//use events::MyEvent;

// The `accounts` and `instructions` modules are generated by the framework.
//use composite::accounts::{Bar, CompositeUpdate, Foo, Initialize};
//use composite::instruction as composite_instruction;
//use composite::{DummyA, DummyB};

use std::str::FromStr;

use anchor_client::anchor_lang::prelude::Pubkey;

use spl_associated_token_account::get_associated_token_address;

#[cfg(feature = "serde-feature")]
use {
    serde::{Deserialize, Serialize},
    serde_with::{As, DisplayFromStr},
};

//import { TOKEN_PROGRAM_ID, createAssociatedTokenAccountInstruction, getAssociatedTokenAddress, createInitializeMintInstruction, MINT_SIZE } from '@solana/spl-token' // IGNORE THESE ERRORS IF ANY

use escrow_marketplace::accounts as market_accounts;
use escrow_marketplace::instruction as market_instructions;

use escrow_marketplace::constants::{VAULT_PREFIX, VAULT_SIGNER};

use crate::{ESCROW_MARKETPLACE, SPL_PROGRAM_ID};

pub fn cancel(client: &Client, nft_mint_key: Pubkey, escrow_account_key: Pubkey) {
    let program = client.program(Pubkey::from_str(ESCROW_MARKETPLACE).unwrap());
    let _authority = program.payer();
    //let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json")).expect("Example requires a keypair file");
    let payer_key = program.payer();
    let (vault_account_pda, _vault_account_bump) = Pubkey::find_program_address(
        &[VAULT_PREFIX, nft_mint_key.as_ref()],
        &Pubkey::from_str(ESCROW_MARKETPLACE).unwrap(),
    );

    let (vault_authority_pda, _escrow_account_bump) = Pubkey::find_program_address(
        &[VAULT_SIGNER, nft_mint_key.as_ref()],
        &Pubkey::from_str(ESCROW_MARKETPLACE).unwrap(),
    );

    let seller_token_account = get_associated_token_address(&payer_key, &nft_mint_key);

    let cancel_res = program
        .request()
        .accounts(market_accounts::Cancel {
            seller: payer_key,
            seller_token_account: seller_token_account,
            vault_account: vault_account_pda,
            vault_authority: vault_authority_pda,
            escrow_account: escrow_account_key,
            token_program: Pubkey::from_str(SPL_PROGRAM_ID).unwrap(),
        })
        .args(market_instructions::Cancel)
        .send()
        .unwrap();
    println!(
        "finished cancel order {}, call res {}",
        escrow_account_key.to_string(),
        cancel_res.to_string()
    );
}
