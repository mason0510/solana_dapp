extern crate core;

use std::cmp::min;
use std::io::Error;
use anchor_client::solana_sdk::commitment_config::CommitmentConfig;
use anchor_client::solana_sdk::signature::read_keypair_file;
use anchor_client::solana_sdk::signature::{Keypair, Signer};
use anchor_client::solana_sdk::system_instruction;
use anchor_client::{Client, ClientError, Cluster, EventContext};
use mpl_token_metadata::instruction::{set_and_verify_collection,verify_collection};
use borsh::{BorshDeserialize, BorshSerialize};


use solana_client::{
    rpc_client::RpcClient,
    rpc_filter::{RpcFilterType, Memcmp, MemcmpEncodedBytes, MemcmpEncoding},
    rpc_config::{RpcProgramAccountsConfig, RpcAccountInfoConfig},
};
use solana_sdk::program_pack::Pack;
use spl_token::{state::{Mint, Account}};
use solana_account_decoder::{UiAccountEncoding};

use anyhow::Result;
use solana_sdk::{client, system_program};
// The `accounts` and `instructions` modules are generated by the framework.
//use events::instruction as events_instruction;
//use events::MyEvent;
use clap::Parser;
// The `accounts` and `instructions` modules are generated by the framework.
//use composite::accounts::{Bar, CompositeUpdate, Foo, Initialize};
//use composite::instruction as composite_instruction;
//use composite::{DummyA, DummyB};
use rand::rngs::OsRng;
use std::rc::Rc;
use std::str::FromStr;
use std::time::Duration;
use anchor_client::anchor_lang::Key;
use anchor_client::anchor_lang::prelude::{Pubkey, Sysvar};
use anchor_client::solana_client::nonce_utils::get_account;
use anchor_client::solana_sdk::nonce::State;
use mpl_token_metadata::pda::{find_master_edition_account, find_metadata_account};
use mpl_token_metadata::state::{Metadata, PREFIX, TokenMetadataAccount};
use solana_client::nonce_utils::get_account_with_commitment;
use solana_sdk::account_info::AccountInfo;
use spl_associated_token_account::{create_associated_token_account,get_associated_token_address};
use spl_associated_token_account::solana_program::pubkey;

#[cfg(feature = "serde-feature")]
use {
    serde::{Deserialize, Serialize},
    serde_with::{As, DisplayFromStr},
};

//import { TOKEN_PROGRAM_ID, createAssociatedTokenAccountInstruction, getAssociatedTokenAddress, createInitializeMintInstruction, MINT_SIZE } from '@solana/spl-token' // IGNORE THESE ERRORS IF ANY

use spl_token::instruction::initialize_mint;
use nft_mint_and_verify::instruction as nft_instructions;
use nft_mint_and_verify::accounts as nft_accounts;

use escrow_marketplace::instruction as market_instructions;
use escrow_marketplace::accounts as market_accounts;
use serde::{Deserialize,Serialize};
use solana_sdk::account::ReadableAccount;
use escrow_marketplace::constants::{MARKET_SETTING, ORDER_SIZE, SETTING_SIZE, VAULT_PREFIX, VAULT_SIGNER};

use escrow_marketplace::state::order::{SellOrder, Settings};
use crate::{ESCROW_MARKETPLACE, SYSTEM_PROGRAM_ID};

fn init_settings(client: &Client){
    let program = client.program(Pubkey::from_str(ESCROW_MARKETPLACE).unwrap());
    let authority = program.payer();
    let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json")).expect("Example requires a keypair file");

    let (market_setting_pda, _) =   Pubkey::find_program_address(
        &[MARKET_SETTING],
        &Pubkey::from_str(ESCROW_MARKETPLACE).unwrap()
    );

    let init_res = program
        .request()
        .accounts(market_accounts::InitSettings{
            setting_account: market_setting_pda,
            authority: payer.pubkey(),
            system_program: Pubkey::from_str(SYSTEM_PROGRAM_ID).unwrap(),
        })
        .args(market_instructions::InitSettings{
            support_coins:vec![],
            fee_ratio: 100 //1%
            })
        .signer(&payer)
        .send().unwrap();
    println!("init settings {}",init_res.to_string());
}
fn update_settings(client: &Client){
    let program = client.program(Pubkey::from_str(ESCROW_MARKETPLACE).unwrap());
    let authority = program.payer();
    let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json")).expect("Example requires a keypair file");
    let buyer = read_keypair_file(&*shellexpand::tilde("/Users/eddy/work/repo/solana/solana_dapp/my_wallet/2.json")).expect("Example requires a keypair file");

    let (market_setting_pda, _) =   Pubkey::find_program_address(
        &[MARKET_SETTING],
        &Pubkey::from_str(ESCROW_MARKETPLACE).unwrap()
    );

    let init_res = program
        .request()
        .accounts(market_accounts::UpdateSettings{
            setting_account: market_setting_pda,
            authority: payer.pubkey(),
        })
        .args(market_instructions::UpdateSettings{
            support_coins:vec![],
            fee_ratio: 123 ,//1.23%
            new_authority: None
        })
        .send().unwrap();
    println!("init settings {}",init_res.to_string());
}
fn list_settings(){
    let rpc_url = String::from("https://api.devnet.solana.com");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
    let order_accounts = connection.get_program_accounts(&Pubkey::from_str(ESCROW_MARKETPLACE).unwrap()).unwrap();
    for (_key,account) in order_accounts.iter(){
        match solana_sdk::borsh::try_from_slice_unchecked::<Settings>(&account.data.as_slice()[8..]) {
            Ok(data) => {
                println!("find setting data {:#?}",data);
            }
            Err(error) =>{
                println!("{:?}",error.to_string());
            }
        }
    }
}