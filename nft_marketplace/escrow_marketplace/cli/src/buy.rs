extern crate core;

use anchor_client::solana_sdk::signature::read_keypair_file;
use anchor_client::solana_sdk::signature::Signer;

use anchor_client::Client;

// The `accounts` and `instructions` modules are generated by the framework.
//use events::instruction as events_instruction;
//use events::MyEvent;

// The `accounts` and `instructions` modules are generated by the framework.
//use composite::accounts::{Bar, CompositeUpdate, Foo, Initialize};
//use composite::instruction as composite_instruction;
//use composite::{DummyA, DummyB};

use std::str::FromStr;

use anchor_client::anchor_lang::prelude::Pubkey;

use spl_associated_token_account::get_associated_token_address;

use escrow_marketplace::accounts as market_accounts;
use escrow_marketplace::instruction as market_instructions;

use escrow_marketplace::constants::{MARKET_SETTING, VAULT_PREFIX, VAULT_SIGNER};

use super::*;

fn buy_and_pay_kcoin() {
    todo!()
}

pub fn buy_and_pay_lamport(client: &Client, nft_mint_key: Pubkey, escrow_account_key: Pubkey) {
    let program = client.program(Pubkey::from_str(ESCROW_MARKETPLACE).unwrap());
    let _authority = program.payer();
    //5wEmePkkXAWYYvvWQDv4Mbenma1jWvzCbt3rK9ihmrqH
    let buyer = read_keypair_file(&*shellexpand::tilde(
        "/Users/eddy/work/repo/solana/solana_dapp/my_wallet/2.json",
    ))
    .expect("Example requires a keypair file");
    let seller = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json"))
        .expect("Example requires a keypair file");

    let (vault_account_pda, _vault_account_bump) = Pubkey::find_program_address(
        &[VAULT_PREFIX, nft_mint_key.as_ref()],
        &Pubkey::from_str(ESCROW_MARKETPLACE).unwrap(),
    );

    let (vault_authority_pda, _escrow_account_bump) = Pubkey::find_program_address(
        &[VAULT_SIGNER, nft_mint_key.as_ref()],
        &Pubkey::from_str(ESCROW_MARKETPLACE).unwrap(),
    );

    let (market_setting_pda, _) = Pubkey::find_program_address(
        &[MARKET_SETTING],
        &Pubkey::from_str(ESCROW_MARKETPLACE).unwrap(),
    );

    let _seller_coin_account =
        get_associated_token_address(&seller.pubkey(), &Pubkey::from_str(K_COIN).unwrap());
    let seller_token_account = get_associated_token_address(&seller.pubkey(), &nft_mint_key);

    let _buyer_coin_account =
        get_associated_token_address(&buyer.pubkey(), &Pubkey::from_str(K_COIN).unwrap());
    let buyer_token_account = get_associated_token_address(&buyer.pubkey(), &nft_mint_key);

    let buyer_res = program
        .request()
        .accounts(market_accounts::PayLamport {
            buyer: buyer.pubkey(),                                                  //买家wallet的key
            //buyer_coin_account,
            //k_coin_mint_account: Pubkey::from_str(K_COIN).unwrap(),
            nft_token_mint_account: nft_mint_key,                                   //nft地址
            buyer_token_account,                                                    //该nft分配给买家用户的地址
            //seller_coin_account,
            seller_token_account,                                                   //该nft分配给卖家用户的地址
            seller: seller.pubkey(),                                                //卖家wallet key
            escrow_account: escrow_account_key,                                     //订单详情地址
            vault_account: vault_account_pda,                                       //合约分配给该nft的托管地址
            vault_authority: vault_authority_pda,                                   //vault_account的写权限地址
            setting_account: market_setting_pda,                                    //市场全局设置地址，手续费、支持的币种等，只有项目方有权限更改
            token_program: Pubkey::from_str(SPL_PROGRAM_ID).unwrap(),
            // sys account
            associated_token_program: Pubkey::from_str(SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID)
                .unwrap(),
            system_program: Pubkey::from_str(SYSTEM_PROGRAM_ID).unwrap(),
            rent: Pubkey::from_str(SYSTEM_RENT_ID).unwrap(),
        })
        .args(market_instructions::BuyAndPayLamport)
        .signer(&buyer)
        .send()
        .unwrap();
    println!("finished pay lamport, cal res {}", buyer_res.to_string());
}
