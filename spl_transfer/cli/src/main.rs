use anchor_client::solana_sdk::commitment_config::CommitmentConfig;
use anchor_client::solana_sdk::pubkey::Pubkey;
use anchor_client::solana_sdk::signature::read_keypair_file;
use anchor_client::solana_sdk::signature::{Keypair, Signer};
use anchor_client::solana_sdk::system_instruction;
use anchor_client::{Client, Cluster, EventContext};

use spl_transfer::accounts as spl_transfer_accounts;
use spl_transfer::instruction as spl_transfer_instruction;
//use basic_2::Counter;

use anyhow::Result;
use solana_sdk::system_program;
// The `accounts` and `instructions` modules are generated by the framework.
//use events::instruction as events_instruction;
//use events::MyEvent;
use clap::Parser;
// The `accounts` and `instructions` modules are generated by the framework.
//use composite::accounts::{Bar, CompositeUpdate, Foo, Initialize};
//use composite::instruction as composite_instruction;
//use composite::{DummyA, DummyB};
use rand::rngs::OsRng;
use std::rc::Rc;
use std::str::FromStr;
use std::time::Duration;

#[derive(Parser, Debug)]
pub struct Opts {
    #[clap(long)]
    pub token_address: Pubkey,
    #[clap(long)]
    pub bridge_contract_pid: Pubkey,
    #[clap(long)]
    pub receiver: Pubkey,
}

const SPL_PROGRAM_ID: &'static str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";

//const BRIDGE_CONTRACT: &'static str = "F1eqWRT9CUruLk9n4mX4fCYKDqSde9yLtveRaywx6vwn";
//const TOKEN_ADDRESS: &'static str = "7YYNXbfwd5i5scpez18fTkEh2MRHJXoMHPffnWNcpFYf";
const SENDER: &'static str = "9hUYW9s2c98GfjZb6JvW62BYEt3ryxGmeMBkhgSqmZtW";
//const RECEIVER: &'static str = "5yNJwDPiXdGFQFULAtrwUgr1DrRiHT6adS4kLn9dxHuv";


// This example assumes a local validator is running with the programs
// deployed at the addresses given by the CLI args.
fn main() -> Result<()> {
    println!("Starting test...");
    let opts = Opts::parse();

    // Wallet and cluster params.
    let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json"))
        .expect("Example requires a keypair file");
    let url = Cluster::Custom(
        "https://api.devnet.solana.com".to_string(),
        "wss://api.devnet.solana.com/".to_string(),
    );

    // Client.
    let client = Client::new_with_options(url, Rc::new(payer), CommitmentConfig::processed());

    // Run tests.
    //composite(&client, opts.composite_pid)?;
    transfer_spl(&client, opts)?;
    //basic_4(&client, opts.basic_4_pid)?;
    //events(&client, opts.events_pid)?;

    // Success.
    Ok(())
}

fn transfer_spl(client: &Client, params: Opts) -> Result<()> {
    let program = client.program(params.bridge_contract_pid); //F1eqWRT9CUruLk9n4mX4fCYKDqSde9yLtveRaywx6vwn

    // `Create` parameters.
    let counter = Keypair::generate(&mut OsRng);
    let authority = program.payer();

    // Build and send a transaction.
    let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json")).expect("Example requires a keypair file");
    let call_res = program
        .request()
        .signer(&payer)
        .accounts(spl_transfer_accounts::TransferWrapper {
            sender: payer.pubkey(),                                       //wallet pubkey
            sender_token: Pubkey::from_str(SENDER).unwrap(),           //sender token account 9hUYW9s2c98GfjZb6JvW62BYEt3ryxGmeMBkhgSqmZtW
            receiver_token: params.receiver,                              //receiver token account  5yNJwDPiXdGFQFULAtrwUgr1DrRiHT6adS4kLn9dxHuv
            mint: params.token_address,                                   // token address 7YYNXbfwd5i5scpez18fTkEh2MRHJXoMHPffnWNcpFYf`
            token_program: Pubkey::from_str(SPL_PROGRAM_ID).unwrap(),  // SPL 官方合约写死   TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
        })//对应anchor合约中的context里面的结构体
        .args(spl_transfer_instruction::TransferWrapper { amount: 10u64 })//对应函数中的费context函数，结构体类型名对应函数名，成员名对应参数
        .send()?;
    println!("call_res {}", call_res);
    //let counter_account: Counter = program.account(counter.pubkey())?;

    //assert_eq!(counter_account.count, 0);

    println!("hello success!");

    Ok(())
}