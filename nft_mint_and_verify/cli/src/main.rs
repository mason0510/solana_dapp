use std::cmp::min;
use anchor_client::solana_sdk::commitment_config::CommitmentConfig;
use anchor_client::solana_sdk::signature::read_keypair_file;
use anchor_client::solana_sdk::signature::{Keypair, Signer};
use anchor_client::solana_sdk::system_instruction;
use anchor_client::{Client, ClientError, Cluster, EventContext};
use mpl_token_metadata::instruction::{set_and_verify_collection,verify_collection};

use solana_client::{
    rpc_client::RpcClient,
    rpc_filter::{RpcFilterType, Memcmp, MemcmpEncodedBytes, MemcmpEncoding},
    rpc_config::{RpcProgramAccountsConfig, RpcAccountInfoConfig},
};
use solana_sdk::program_pack::Pack;
use spl_token::{state::{Mint, Account}};
use solana_account_decoder::{UiAccountEncoding};

use anyhow::Result;
use solana_sdk::{client, system_program};
// The `accounts` and `instructions` modules are generated by the framework.
//use events::instruction as events_instruction;
//use events::MyEvent;
use clap::Parser;
// The `accounts` and `instructions` modules are generated by the framework.
//use composite::accounts::{Bar, CompositeUpdate, Foo, Initialize};
//use composite::instruction as composite_instruction;
//use composite::{DummyA, DummyB};
use rand::rngs::OsRng;
use std::rc::Rc;
use std::str::FromStr;
use std::time::Duration;
use anchor_client::anchor_lang::prelude::{Pubkey, Sysvar};
use anchor_client::solana_client::nonce_utils::get_account;
use anchor_client::solana_sdk::nonce::State;
use mpl_token_metadata::pda::{find_master_edition_account, find_metadata_account};
use mpl_token_metadata::state::{Metadata, PREFIX, TokenMetadataAccount};
use solana_client::nonce_utils::get_account_with_commitment;
use solana_sdk::account_info::AccountInfo;
use spl_associated_token_account::{create_associated_token_account,get_associated_token_address};
use spl_associated_token_account::solana_program::pubkey;

//import { TOKEN_PROGRAM_ID, createAssociatedTokenAccountInstruction, getAssociatedTokenAddress, createInitializeMintInstruction, MINT_SIZE } from '@solana/spl-token' // IGNORE THESE ERRORS IF ANY

use spl_token::instruction::initialize_mint;
use nft_mint_and_verify::instruction as nft_instructions;
use nft_mint_and_verify::accounts as nft_accounts;


#[derive(Parser, Debug)]
pub struct Opts {
    #[clap(long)]
    pub token_address: Pubkey,
    #[clap(long)]
    pub bridge_contract_pid: Pubkey,
    #[clap(long)]
    pub receiver: Pubkey,
}

const SPL_PROGRAM_ID: &'static str = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";

//const BRIDGE_CONTRACT: &'static str = "F1eqWRT9CUruLk9n4mX4fCYKDqSde9yLtveRaywx6vwn";
//const TOKEN_ADDRESS: &'static str = "7YYNXbfwd5i5scpez18fTkEh2MRHJXoMHPffnWNcpFYf";
const SENDER: &'static str = "9hUYW9s2c98GfjZb6JvW62BYEt3ryxGmeMBkhgSqmZtW";
const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: &'static str = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";

pub fn find_metadata_pda(mint: &Pubkey) -> Pubkey {
    let (pda, _bump) = find_metadata_account(mint);

    pda
}

pub fn find_master_edition_pda(mint: &Pubkey) -> Pubkey {

    let (pda, _bump) = find_master_edition_account(mint);
    pda
}

pub fn get_acc(address: Pubkey) -> solana_sdk::account::Account{
    let rpc_client = RpcClient::new(
        "https://api.devnet.solana.com".to_string(),
    );
    rpc_client
        .get_account_with_commitment(&address, CommitmentConfig::processed()).unwrap()
        .value
        .ok_or(ClientError::AccountNotFound).unwrap()
}


// This example assumes a local validator is running with the programs
// deployed at the addresses given by the CLI args.
fn main() -> Result<()> {
    println!("Starting test...");
    let opts = Opts::parse();

    // Wallet and cluster params.
    let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json"))
        .expect("Example requires a keypair file");
    let url = Cluster::Custom(
        "https://api.devnet.solana.com".to_string(),
        "wss://api.devnet.solana.com/".to_string(),
    );

    // Client.
    let client = Client::new_with_options(url, Rc::new(payer), CommitmentConfig::processed());
    //let rpcClient = RpcClient::new("https://api.devnet.solana.com".to_string());
    //let account1 = get_account(&rpcClient,
     //                         &Pubkey::from_str("GHM5Z4jKr2jwC8iqERVoSn9u6W7jodDcWYcD7BmdYWA2").unwrap()).unwrap();
    // Run tests.
    //let program = client.program(params.bridge_contract_pid);
    //let account2 : solana_sdk::account::Account = program.account(Pubkey::from_str("GHM5Z4jKr2jwC8iqERVoSn9u6W7jodDcWYcD7BmdYWA2").unwrap()).unwrap();
    //let test2 = AccountInfo::from("1");
    //let test3 : Metadata = Metadata::from_account_info(&account2).unwrap();
    mint_nft(&client, opts)?;
    Ok(())
}

fn mint_nft(client: &Client, params: Opts) -> Result<()> {
    let program = client.program(params.bridge_contract_pid); //BGzwb76jQtDP9hpho7WDSzFSYSJUbbZq4Jkpggb4aiuA
    let authority = program.payer();
    let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json")).expect("Example requires a keypair file");
    let mint_token = Keypair::new();
    println!("mintkey {}", mint_token.pubkey().to_string());
    println!("mpl_token_metadata::ID {}",mpl_token_metadata::ID);
    println!("spl_token::ID {}",spl_token::id());
    let collection_mint_key = Pubkey::from_str("6P64iPbit6iUbwMj55pXXEu7GxUaE9jPVqWCmomyqPph").unwrap();
    let mint_size = 1461600u64; //0.0014616
    let mint_space = 82u64;
    let to_address = Pubkey::from_str("677NzkzkDKT9wXDMXGPUvbFp1T7XzJtZZxcRaBAaSvNa").unwrap();
    let spl_program_key = Pubkey::from_str(SPL_PROGRAM_ID).unwrap();
    let nft_token_account = get_associated_token_address(&to_address,&mint_token.pubkey());
    let metadata_address = find_metadata_pda(&mint_token.pubkey());
    let edition_address = find_master_edition_pda(&mint_token.pubkey());

    let call_res = program
        .request()
        .accounts(nft_accounts::MintNFT{
            metadata: metadata_address,
            master_edition: edition_address,
            mint: mint_token.pubkey(),
            token_account: nft_token_account,
            mint_authority: payer.pubkey(),
            rent: Pubkey::from_str("SysvarRent111111111111111111111111111111111").unwrap(),
            system_program: Pubkey::from_str("11111111111111111111111111111111").unwrap(),
            token_program: Pubkey::from_str("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA").unwrap(),
            associated_token_program: Pubkey::from_str("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL").unwrap(),
            token_metadata_program: Pubkey::from_str("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s").unwrap(),
        })
        .args(nft_instructions::AccountInit{
            title: "test1".to_string(),
            uri: "https://bafybeiagelxwxuundel3rjqydvunf24llrg4e2a5l4fje27arsdzhdgaqu.ipfs.nftstorage.link/0.json".to_string(),
            symbol: "KR".to_string()
        })
        .signer(&payer).signer(&mint_token).send()?;

    println!("call_res1 {}", call_res);


    let call_res2 = program
        .request()
        .accounts(nft_accounts::MintNFT{
            metadata: metadata_address,
            master_edition: edition_address,
            mint: mint_token.pubkey(),
            token_account: nft_token_account,
            mint_authority: payer.pubkey(),
            rent: Pubkey::from_str("SysvarRent111111111111111111111111111111111").unwrap(),
            system_program: Pubkey::from_str("11111111111111111111111111111111").unwrap(),
            token_program: Pubkey::from_str("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA").unwrap(),
            associated_token_program: Pubkey::from_str("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL").unwrap(),
            token_metadata_program: Pubkey::from_str("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s").unwrap(),
        })
        .args(nft_instructions::MintTo{
            title: "test1".to_string(),
            uri: "https://bafybeiagelxwxuundel3rjqydvunf24llrg4e2a5l4fje27arsdzhdgaqu.ipfs.nftstorage.link/0.json".to_string(),
            symbol: "KR".to_string()
        })
        .signer(&payer).signer(&mint_token).send()?;


    println!("call_res2 {}", call_res2);
    //let counter_account: Counter = program.account(counter.pubkey())?;

    //assert_eq!(counter_account.count, 0);

    /**
         pub metadata_account: AccountInfo<'info>,
    pub collection_authority: AccountInfo<'info>,
    pub payer: AccountInfo<'info>,
    pub update_authority: AccountInfo<'info>,
    pub collection_mint: Account<'info, Mint>,
    pub collection_metadata: AccountInfo<'info>,
    pub collection_master_edition: AccountInfo<'info>,
    pub system_program: AccountInfo<'info>,
    pub rent: AccountInfo<'info>,
     **/
    println!("---{}",find_metadata_pda(&mint_token.pubkey()).to_string());
    let call_res3 = program
        .request()
        .accounts(nft_accounts::SetAndVerifyCollection{
            metadata_account: find_metadata_pda(&mint_token.pubkey()),
            collection_authority: payer.pubkey(),
            payer: payer.pubkey(),
            update_authority: payer.pubkey(),
            collection_mint: Pubkey::from_str("6P64iPbit6iUbwMj55pXXEu7GxUaE9jPVqWCmomyqPph").unwrap(),
            collection_metadata: find_metadata_pda(&Pubkey::from_str("6P64iPbit6iUbwMj55pXXEu7GxUaE9jPVqWCmomyqPph").unwrap()),
            collection_master_edition: find_master_edition_pda(&Pubkey::from_str("6P64iPbit6iUbwMj55pXXEu7GxUaE9jPVqWCmomyqPph").unwrap()),
            system_program: Pubkey::from_str("11111111111111111111111111111111").unwrap(),
            rent:Pubkey::from_str("SysvarRent111111111111111111111111111111111").unwrap(),
            mpl_token_metadata:Pubkey::from_str("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s").unwrap(),

        })
        .args(nft_instructions::CollectionAdd{
            title: "test1".to_string(),
            uri: "https://bafybeiagelxwxuundel3rjqydvunf24llrg4e2a5l4fje27arsdzhdgaqu.ipfs.nftstorage.link/0.json".to_string(),
            symbol: "KR".to_string()
        })
        .signer(&payer).signer(&payer).send()?;
    println!("call_res3 {}", call_res3);

    println!("hello success!");

    Ok(())
}